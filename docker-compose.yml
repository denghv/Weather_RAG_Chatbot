version: '3'

services:
  kafka1:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka1:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'EmptNWtoR4GGWx-BH6nGLQ'
      # Giảm replication factor xuống 2 thay vì 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      # Giảm min.insync.replicas xuống 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      # Thêm cấu hình để tự động tạo topic
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      TZ: Asia/Ho_Chi_Minh
    volumes:
      - ./kafka1/data:/var/lib/kafka/data
    networks:
      - kafka-net

  kafka2:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9094:9092"
      - "9095:9093"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_BROKER_ID: 2
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka2:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'EmptNWtoR4GGWx-BH6nGLQ'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      TZ: Asia/Ho_Chi_Minh
    volumes:
      - ./kafka2/data:/var/lib/kafka/data
    networks:
      - kafka-net

  kafka3:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9096:9092"
      - "9097:9093"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_BROKER_ID: 3
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka3:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'EmptNWtoR4GGWx-BH6nGLQ'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      TZ: Asia/Ho_Chi_Minh
    volumes:
      - ./kafka3/data:/var/lib/kafka/data
    networks:
      - kafka-net

  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password123
      - DOCKER_INFLUXDB_INIT_ORG=my-org
      - DOCKER_INFLUXDB_INIT_BUCKET=weather
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-token
      - INFLUX_ORG=my-org
      - INFLUX_TOKEN=my-token
      - TZ=Asia/Ho_Chi_Minh
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - weather-network
      - kafka-net

  weather-producer:
    build: .
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9092,kafka3:9092
      - KAFKA_TOPIC=weather-data
      - WEATHER_API_KEY=ea8aa08895454e78b10145125253003
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    restart: on-failure:10
    networks:
      - weather-network
      - kafka-net

  weather-consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9092,kafka3:9092
      - KAFKA_TOPIC=weather-data
      - KAFKA_GROUP_ID=weather-influxdb-consumer
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=my-token
      - INFLUXDB_ORG=my-org
      - INFLUXDB_BUCKET=weather
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - influxdb
    restart: on-failure:10
    networks:
      - weather-network
      - kafka-net

  chatbot:
    build:
      context: .
      dockerfile: ./chatbot/Dockerfile
    ports:
      - "5000:5000"
    environment:
      - OPENAI_API_KEY=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
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=my-token
      - INFLUXDB_ORG=my-org
      - INFLUXDB_BUCKET=weather
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - influxdb
    restart: on-failure:10
    networks:
      - weather-network


  weather-forecast-service:
    build:
      context: .
      dockerfile: ./weather_forecast_service/Dockerfile
    container_name: weather-forecast-service
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=my-token
      - INFLUXDB_ORG=my-org
      - INFLUXDB_BUCKET=weather_forecast
      - TZ=Asia/Ho_Chi_Minh
    volumes:
      - ./dataset/unified_models:/app/dataset/unified_models
      - ./dataset/weather2009-2021.csv:/app/dataset/weather2009-2021.csv
    depends_on:
      - influxdb
    restart: on-failure:10
    networks:
      - weather-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - weather-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - TZ=Asia/Ho_Chi_Minh
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
      - influxdb
    networks:
      - weather-network

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - weather-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8081:8080"
    networks:
      - weather-network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DOMAIN=minio
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - weather-network

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb --ignore-existing myminio/weather-aggregates;
      /usr/bin/mc anonymous set download myminio/weather-aggregates;
      exit 0;
      "
    networks:
      - weather-network

  spark-master:
    image: bitnami/spark:3.5.3
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - TZ=Asia/Ho_Chi_Minh
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - weather-network

  spark-worker:
    image: bitnami/spark:3.5.3
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - spark-master
    networks:
      - weather-network

  weather-aggregator:
    build:
      context: ./weather-aggregator
      dockerfile: Dockerfile
    container_name: weather-aggregator
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9092,kafka3:9092
      - KAFKA_TOPIC=weather-data
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=weather-aggregates
      - CHECKPOINT_LOCATION=/tmp/checkpoints/weather-aggregator
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - spark-master
      - kafka1
      - kafka2
      - kafka3
      - minio
      - createbuckets
    networks:
      - weather-network
      - kafka-net



networks:
  weather-network:
    driver: bridge
  kafka-net:
    driver: bridge

volumes:
  influxdb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local
