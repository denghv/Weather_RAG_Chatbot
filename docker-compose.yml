version: '3'

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - TZ=Asia/Ho_Chi_Minh
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - weather-network

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
      - TZ=Asia/Ho_Chi_Minh
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - weather-network

  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password123
      - DOCKER_INFLUXDB_INIT_ORG=my-org
      - DOCKER_INFLUXDB_INIT_BUCKET=weather
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-token
      - INFLUX_ORG=my-org
      - INFLUX_TOKEN=my-token
      - TZ=Asia/Ho_Chi_Minh
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - weather-network

  weather-producer:
    build: .
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=weather-data
      - WEATHER_API_KEY=ea8aa08895454e78b10145125253003
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - kafka
    restart: on-failure:10
    networks:
      - weather-network

  weather-consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=weather-data
      - KAFKA_GROUP_ID=weather-influxdb-consumer
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=my-token
      - INFLUXDB_ORG=my-org
      - INFLUXDB_BUCKET=weather
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - kafka
      - influxdb
    restart: on-failure:10
    networks:
      - weather-network

  chatbot:
    build:
      context: .
      dockerfile: ./chatbot/Dockerfile
    ports:
      - "5000:5000"
    environment:
      - OPENAI_API_KEY=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
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=my-token
      - INFLUXDB_ORG=my-org
      - INFLUXDB_BUCKET=weather
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - influxdb
    restart: on-failure:10
    networks:
      - weather-network

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=weather-hadoop
      - TZ=Asia/Ho_Chi_Minh
    env_file:
      - ./hadoop.env
    networks:
      - weather-network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      - SERVICE_PRECONDITION=namenode:9870
      - TZ=Asia/Ho_Chi_Minh
    env_file:
      - ./hadoop.env
    depends_on:
      - namenode
    networks:
      - weather-network

  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - TZ=Asia/Ho_Chi_Minh
    networks:
      - weather-network

  spark-worker:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2G
      - TZ=Asia/Ho_Chi_Minh
    networks:
      - weather-network

  spark-streaming:
    build:
      context: ./spark-streaming
    container_name: spark-streaming
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=weather-data
      - HDFS_URL=hdfs://namenode:8020
      - HDFS_PATH=/weather-data
      - CHECKPOINT_LOCATION=/checkpoints/weather-data
      - BATCH_INTERVAL_SECONDS=60
      - PROVINCE_COUNT=10
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - kafka
      - namenode
      - datanode
      - spark-master
    networks:
      - weather-network

networks:
  weather-network:
    driver: bridge

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  influxdb_data:
    driver: local
  hadoop_namenode:
    driver: local
  hadoop_datanode:
    driver: local
